#!/usr/bin/env node

var root = process.cwd();
require("colors");
var path = require('path');
var os = require("os");
var fs = require('fs');
var http = require('http');
var argv = require('optimist')
    .alias('l', 'log')
    .alias('h', 'host')
    .alias('c', 'clean')
    .alias('s', 'static')
    .alias('d', 'dynamic')
    .argv;
var fsextra = require("fs-extra");
require('../modules/delta');
require('../modules/ip');
require('../modules/flowcontrol');
require('../modules/commands');
var posix = require('posix');
var user = require('../modules/user');
var api = require("../lib/api");
var express = require('express');
var vhost = require('vhost');
var webexServer = require("../Servers/webExServer");
var staticServer = require("../Servers/staticServer");
var etcHosts = require('etc-hosts');

process.on('exit', function(){
    etcHosts.write([]);
});

function setGlobal() {
    global.EDGE = true;
    global.API_JSON = api.API_JSON;
    global.API = api.API;
    global.EMIT = api.EMIT;
    global.ContainsAPI = api.ContainsAPI;

    var hosts = [{ip:'127.0.0.1', names:[
        'api.wifi.network'
    ]},
        {ip:'127.0.0.1', names:[
            'global.wifi.network'
        ]}];
    global.host = argv.host ? argv.host : 'wifi.network';
    hosts.push({
        ip: '127.0.0.1',
        names: [ global.host ]
    });
    etcHosts.write(hosts);

    if(argv.clean) {
        etcHosts.write([]);
    }
}

setGlobal();

setTimeout(Serve, 2000);

function Serve() {
    if (argv.log) {
        console.log(global.API_JSON);
    } else if (argv.static || argv.dynamic) {

        var app = express();
        app.use(vhost('api.wifi.network', webexServer.app));

        var entry = '';
        if (argv.static) {
            var stat = fs.statSync(argv.static);
            if (!stat.isDirectory())
                throw new Error('static mode must specify a folder rather than a file'.red);
            entry = argv.static;
        }
        else if (argv.dynamic)
            entry = argv.dynamic;
        try {
            var absPath = path.resolve(entry);
            var fileName = path.basename(absPath);
            var filePath = argv.static ? absPath : path.dirname(absPath);
            console.log(filePath, fileName);
            var globalPath = path.resolve(path.join(__dirname, '../Global'));
            console.log('global.wifi.network'.green, globalPath);

            async.series([
                function(cb) {
                    //if(os.platform() === 'darwin') {
                    //    exec('ln', '-s', globalPath, path.join(filePath, 'Global'), function(){
                    //        cb();
                    //    });
                    //} else {
                    var target = path.join(filePath, 'Global');
                    if(!fs.existsSync(target))
                        fsextra.mkdirpSync(target);
                    mount_auto(globalPath, target, ["--bind", '-o', 'noexec,nosuid,nodev'],
                        function () {
                            cb();
                    });
                    //}
                },
                function(cb) {
                    posix.chroot(argv.static ? filePath : path.dirname(filePath));
                    process.chdir('/');

                    app.use(vhost('global.wifi.network', staticServer('/Global')));

                    if (!fs.existsSync('/Data')) fs.mkdirSync('/Data');
                    if (!fs.existsSync('/Share')) fs.mkdirSync('/Share');

                    //console.log(fs.statSync('/Global'));

                    if (argv.static) { // STATIC
                        app.use(vhost(global.host, staticServer('/')));
                    }
                    else if (argv.dynamic) { // DYNAMIC
                        require('/' + fileName);
                    }
                    cb();
                }
            ], function(err) {
                app.listen(80);
            });
        } catch (err) {
            throw err;
        }
    }
}