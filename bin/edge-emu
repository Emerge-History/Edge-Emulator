#!/usr/bin/env node

var root = process.cwd();
require("colors");
var path = require('path');
var os = require("os");
var fs = require('fs');
var http = require('http');
var argv = require('optimist')
    .alias('l', 'log')
    .alias('g', 'global')
    .alias('h', 'host')
    .alias('c', 'clean')
    .alias('s', 'static')
    .alias('d', 'dynamic')
    .alias('m', 'symbol')
    .argv;
var fsextra = require("fs-extra");
require('../modules/use');
require('../modules/commands');
var posix = require('posix');
var user = require('../modules/user');
var api = require("../lib/api");
var Brand = require("../lib/Brand");
var express = require('express');
var vhost = require('vhost');
var webexServer = require("../Servers/webExServer");
var staticServer = require("../Servers/staticServer");
var etcHosts = require('etc-hosts');

process.on('exit', function () {
    etcHosts.write([]);
});

function setGlobal() {
    global.path = require("path");
    global.http = require("http");
    global.fs = require("fs");
    global.child_process = require('child_process');
    global.qs = require("querystring");
    global.async = require("async");
    global._ = require("underscore");

    global.EDGE = true;
    global.API_JSON = api.API_JSON;
    global.API = api.API;
    global.EMIT = api.EMIT;
    global.ContainsAPI = api.ContainsAPI;
    global.Server = http.createServer();
    global.globalPath = path.resolve(path.join(__dirname, '../Global'));
    global.datasource = path.resolve(path.join(__dirname, '../datasource'));

    var hosts = [{ ip: '127.0.0.1',
        names: [ 'global.wifi.network', 'api.wifi.network' ]}];
    global.host = argv.host ? argv.host : 'wifi.network';
    hosts.push({
        ip: '127.0.0.1',
        names: [global.host]
    });
    etcHosts.write(hosts);

    if (argv.clean) {
        etcHosts.write([]);
    }

    if(argv.global) {
        global.globalPath = path.resolve(argv.global);
    }

    if(argv.symbol) {
        global.symbol = path.resolve(argv.symbol);
        Brand.Initialize(function(err){
            if(err) return console.log('symbol init err'.red, err);
            return console.log('symbol init successful.'.green);
        });
    }
}

setGlobal();

setTimeout(Serve, 2000);

function Serve() {
    if (argv.log) {
        console.log(global.API_JSON);
    } else if (argv.static || argv.dynamic) {

        var app = express();
        app.use(vhost('api.wifi.network', webexServer.app));

        var entry = '';
        if (argv.static) {
            var stat = fs.statSync(argv.static);
            if (!stat.isDirectory())
                throw new Error('static mode must specify a folder rather than a file'.red);
            entry = argv.static;
        }
        else if (argv.dynamic) {
            var stat = fs.statSync(argv.dynamic);
            if (!stat.isFile())
                throw new Error('dynamic mode must specify a file rather than a folder'.red);
            entry = argv.dynamic;
        }
        try {
            var absPath = path.resolve(entry);
            var fileName = path.basename(absPath);
            var filePath = argv.static ? absPath : path.dirname(absPath);
            console.log(filePath, fileName);
            console.log('global.wifi.network'.green, global.globalPath);

            var jobs = [];
            jobs.push(function (cb) {
                var target = path.join(filePath, 'Global');
                if (!fs.existsSync(target))
                    fsextra.mkdirpSync(target);
                if (os.platform() === 'darwin') {
                    mount_auto_os_x(global.globalPath, target,function () {
                        cb();
                    });
                } else {
                    mount_auto(global.globalPath, target, ["--bind", '-o', 'noexec,nosuid,nodev'],
                        function () {
                            cb();
                        });
                }
            });
            jobs.push(function (cb) {
                var target = path.join(filePath, 'datasource');
                if (!fs.existsSync(target))
                    fsextra.mkdirpSync(target);
                if (os.platform() === 'darwin') {
                    mount_auto_os_x(global.datasource, target,function () {
                        cb();
                    });
                } else {
                    mount_auto(global.datasource, target, ["--bind", '-o', 'noexec,nosuid,nodev'],
                        function () {
                            cb();
                        });
                }
            });
            if(global.symbol){
                jobs.push(function(cb){
                    var target = path.join(filePath, 'Symbol');
                    if (!fs.existsSync(target))
                        fsextra.mkdirpSync(target);
                    if (os.platform() === 'darwin') {
                        mount_auto_os_x(global.symbol, target,function () {
                            cb();
                        });
                    } else {
                        mount_auto(global.symbol, target, ["--bind", '-o', 'noexec,nosuid,nodev'],
                            function () {
                                cb();
                            });
                    }
                });
            }
            jobs.push(function (cb) {
                console.log('/ == '.green, filePath.red);
                posix.chroot(filePath);
                process.chdir('/');

                app.use(vhost('global.wifi.network', staticServer('/Global')));

                if (!fs.existsSync('/Data')) fs.mkdirSync('/Data');
                if (!fs.existsSync('/Share')) fs.mkdirSync('/Share');

                //console.log(fs.readdirSync('/'));

                if (argv.static) { // STATIC
                    app.use(vhost(global.host, staticServer('/')));
                }
                else if (argv.dynamic) { // DYNAMIC
                    var dynamicApp = require('/' + fileName);
                    app.use(vhost(global.host, function(req, res){
                        Server.emit('request', req, res);
                    }));
                }
                cb();
            });
            async.series(jobs, function (err) {
                app.listen(80);
            });
        } catch (err) {
            throw err;
        }
    }
}